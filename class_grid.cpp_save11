#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include <complex.h>
#include <gsl/gsl_eigen.h>
#include <gsl/gsl_sf_coupling.h>
#include "class_grid.h"
#include "utils.h"
#include "orb.h"
#include "sphere_lebedev_rule.h"
#include "sasha.h"

GRID::GRID(int nbas,int lamax,cmplx *Xi,cmplx *Wi,cmplx *TXX,cmplx *TIXX){ 
  int i;
  nbreak=nbas;
  nmlps=lamax;
  Xz=(cmplx*)calloc(nbreak,sizeof(cmplx));
  Wz=(cmplx*)calloc(nbreak,sizeof(cmplx));
  for(i=0;i<nbreak;i++){
    Xz[i]=Xi[i];
    Wz[i]=Wi[i];
  }
  KE=(cmplx*)calloc(nbreak*nbreak*nmlps,sizeof(cmplx));
  KEI=(cmplx*)calloc(nbreak*nbreak*nmlps,sizeof(cmplx));
  for(i=0;i<nbreak*nbreak*nmlps;i++){
    KE[i]=TXX[i];
    KEI[i]=TIXX[i];
  }
}

void GRID::_HH1(int l,double Zcharge,cmplx *H1){
  int i,j;
  double z1,*A;
  gsl_matrix_view m;
  gsl_vector *eval;
  gsl_matrix *evec;
  gsl_vector_view evec_i;
  gsl_eigen_symmv_workspace *w;
  A=(double*)calloc(nbreak*nbreak,sizeof(double));
  for(i=0;i<nbreak;i++){
    for(j=0;j<nbreak;j++){
      A[j+nbreak*i]=creal(KE[j+nbreak*i+nbreak*nbreak*l]);
      if(i==j){
	A[j+nbreak*i]=A[j+nbreak*i]-Zcharge/creal(Xz[i]);
      }
    }
  }
  m=gsl_matrix_view_array(A,nbreak,nbreak);
  eval=gsl_vector_alloc(nbreak);
  evec=gsl_matrix_alloc(nbreak,nbreak);
  w=gsl_eigen_symmv_alloc(nbreak);
  gsl_eigen_symmv(&m.matrix,eval,evec,w);
  gsl_eigen_symmv_free(w);
  gsl_eigen_symmv_sort(eval,evec,GSL_EIGEN_SORT_VAL_ASC);
  printf("Partial=%d\n",l);
  for(i=0;i<nbreak;i++){
    z1=gsl_vector_get(eval,i);
    printf("%d % .8le\n",i,z1);
  }
  gsl_vector_free(eval);
  gsl_matrix_free(evec);
  free(A);
}


cmplx GRID::_PSSN(int i,int j,int k,int l,int v){
  cmplx beta;
  if(j==l && i==k){
    beta=(2.0*v+1)*KEI[j+nbreak*i+nbreak*nbreak*v]/(Xz[j]*Xz[i]*cpow(Wz[i]*Wz[j],0.5));
    beta=beta+cpow(Xz[j]*Xz[i],v)/cpow(Xz[nbreak-1],2.0*v+1);
  }
  return beta;
}

void GRID::_JKO(int id,int numprocs){
  int i,j,k,l,nsph,i1,i2,j1,j2,l1,l2,m1,m2,li,lf,local_n;
  int lmax,*lo=NULL,*mo=NULL,lmorb,nchannels,*la,*ma;
  double *C3j;
  cmplx **cilm=NULL,beta,z1,z2,z3,z4;
  char fichero[50]="lih_states3.02.molden2015";
  char symm[5]="C2v",irrep[5]="a1",str[2]="y";
  _GETORB(fichero,symm,irrep,1,str,&lmorb,&lo,&mo,&cilm);
  nsph=nmlps*(2*nmlps+1);
  C3j=(double*)calloc(lmorb*lmorb*nsph,sizeof(double));
  la=(int*)calloc(nsph,sizeof(int));
  ma=(int*)calloc(nsph,sizeof(int));
  k=0;
  for(j=0;j<=nmlps;j++){
    for(i=-j;i<=j;i++){
      la[k]=j;
      ma[k]=i;
      k++;
    }
  }
  for(i=0;i<lmorb;i++){
    for(j=0;j<lmorb;j++){
      for(k=0;k<nsph;k++){
	C3j[k+nsph*(j+lmorb*i)]=_C3jBlm(str,str,lo[i],lo[j],la[k],mo[i],mo[j],ma[k]);
      }
    }
  }
  
  local_n=(int)(floor(20/numprocs));
  if(id<20-numprocs*local_n){
    local_n=local_n+1;
  }
  printf("%d %d\n",id,local_n);
  fflush(stdout);
  for(i=0;i<local_n;i++){
    li=floor((i+id*local_n)/nbreak); //calculate local indexes
    i1=i+id*local_n-nbreak*li; 
    for(j=0;j<nbreak*lmorb;j++){ //make the upper diagonal matrix
      lf=floor(j/nbreak);
      j1=j-nbreak*lf;

      ///exchange integral
      z1=0.0;
      for(l=0;l<nsph;l++){
	z2=4.0*M_PI*pow(-1,ma[l])*_PSSN(i1,j1,i1,j1,la[l])/(2.0*l+1.0);
  	for(l1=0;l1<lmorb;l1++){
	  z2=z2*C3j[l+nsph*(l1+lmorb*li)];
  	  for(l2=0;l2<lmorb;l2++){
  	    z2=z2*C3j[l+nsph*(l2+lmorb*lf)];
	    z2=z2*cilm[i1][l1]*cilm[j1][l2];
  	    z1=z1+z2;
  	  }
  	}
      }
      
    }
  }
  
  free(la);
  free(ma);
  free(lo);
  free(mo);
  free(cilm);
}


 void GRID::_GETORB(char *orbfile,char *symm,char *irrep,int lo,char *str1,int *lmorb,int **li,int **mi,cmplx ***cilm){
  FILE *file;
  int i,j,k,l,ngrid,v,nchannels;
  double *orb,*x,*y,*z,*xi,*yi,*zi,*wi,theta,phi;
  cmplx beta;
  char str[10],fichero[25]="angular_";
  const int n=110; //el que mejor funciona es 194
  nchannels=0;
  l=(int)(ceil(nmlps/2));
  _genlm(symm,irrep,l);
  strcat(fichero,symm);  
  strcat(fichero,"_");
  strcat(fichero,irrep);
  strcat(fichero,".inp");
  file=fopen(fichero,"r");
  for(i=getc(file);i!=EOF;i=getc(file)){
    if(i=='\n'){ 
      nchannels=nchannels+1;
    }
  }
  fclose(file);
  *lmorb=nchannels;
  printf("%d\n",nchannels);
  *li=(int*)calloc(nchannels,sizeof(int));
  *mi=(int*)calloc(nchannels,sizeof(int));
  file=fopen(fichero,"r");
  for(i=0;i<nchannels;i++){
    fscanf(file,"%d%d%s",&(*li)[i],&(*mi)[i],str);
  }
  fclose(file);
  strcpy(str1,str);
  
  xi=(double*)calloc(n,sizeof(double));
  yi=(double*)calloc(n,sizeof(double));
  zi=(double*)calloc(n,sizeof(double));
  wi=(double*)calloc(n,sizeof(double));
  ld0110(xi,yi,zi,wi);
  ngrid=n*nbreak;
  orb=(double*)calloc(ngrid,sizeof(double));
  x=(double*)calloc(ngrid,sizeof(double));
  y=(double*)calloc(ngrid,sizeof(double));
  z=(double*)calloc(ngrid,sizeof(double));
  for(i=0;i<nbreak;i++){
    for(j=0;j<n;j++){
      x[j+n*i]=xi[j]*creal(Xz[i]);
      y[j+n*i]=yi[j]*creal(Xz[i]);
      z[j+n*i]=zi[j]*creal(Xz[i]);
    }
  }
  _getorb(orbfile,lo,ngrid,x,y,z,orb);

  *cilm=(cmplx**)calloc(nbreak,sizeof(cmplx));
  for(i=0;i<nbreak;i++){
    (*cilm)[i]=(cmplx*)calloc(nchannels,sizeof(cmplx));
  }
  for(i=0;i<nbreak;i++){
    for(l=0;l<nchannels;l++){
      beta=0.0;
      for(j=0;j<n;j++){
        theta=acos(zi[j]);
        phi=atan2(yi[j],xi[j]);
	if(strcmp(symm,"ylm")==0){
	  beta=beta+sqrt(creal(Wz[i]))*wi[j]*orb[j+n*i]*conj(_Ylm((*li)[l],(*mi)[l],theta,phi))*creal(Xz[i]);
	}
	else{
	  beta=beta+sqrt(creal(Wz[i]))*wi[j]*orb[j+n*i]*_Blm(str,(*li)[l],(*mi)[l],theta,phi)*creal(Xz[i]);
	}
      }
      (*cilm)[i][l]=4.0*M_PI*beta;
    }
  }  
  beta=0.0;
  for(i=0;i<nbreak;i++){
    for(l=0;l<nchannels;l++){
      beta=beta+((*cilm)[i][l])*conj((*cilm)[i][l]);
    }
  }
  printf("%s %d%s Norm=% .8le % .8le\n",symm,lo,irrep,creal(beta),cimag(beta));

  // /////esto es para pintar orbitales en el eje z make sense only for diatomics
  // for(i=nbreak-1;i>=0;i--){    
  //   beta=0.0;
  //   for(l=0;l<nchannels;l++){
  //     //      beta=beta+(*cilm)[i][l]*_Ylm((*li)[l],(*mi)[l],M_PI,0.0)/(sqrt(creal(Wz[i]))*creal(Xz[i]));
  //     beta=beta+(*cilm)[i][l]*_Blm(str,(*li)[l],(*mi)[l],M_PI,0.0)/(sqrt(creal(Wz[i]))*creal(Xz[i]));
  //   }
  //   printf("% .8le % .8le % .8le\n",-creal(Xz[i]),creal(beta),cimag(beta));
  // }  
  // for(i=0;i<nbreak;i++){    
  //   beta=0.0;
  //   for(l=0;l<nchannels;l++){
  //     //      beta=beta+(*cilm)[i][l]*_Ylm((*li)[l],(*mi)[l],0.0,0.0)/(sqrt(creal(Wz[i]))*creal(Xz[i]));
  //     beta=beta+(*cilm)[i][l]*_Blm(str,(*li)[l],(*mi)[l],0.0,0.0)/(sqrt(creal(Wz[i]))*creal(Xz[i]));
  //   }
  //   printf("% .8le % .8le % .8le\n",creal(Xz[i]),creal(beta),cimag(beta));
  // }
  
  free(xi);
  free(yi);
  free(zi);
  free(wi);
  free(x);
  free(y);
  free(z);
  free(orb);
}


